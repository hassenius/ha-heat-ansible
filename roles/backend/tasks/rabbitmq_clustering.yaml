---
- name: rabbitmq_clustering | stopping rabbitmq app
  command: rabbitmqctl stop_app
  ignore_errors: yes

- name: rabbitmq_clustering | resetting rabbitmq app
  command: rabbitmqctl reset

- name: rabbitmq_clustering | stopping rabbitmq-server
  service: name=rabbitmq-server state=stopped
  ignore_errors: yes

- name: Get the masters erlang cookie file
  slurp: src=/var/lib/rabbitmq/.erlang.cookie
  register: rabbitmq_erlang_cookie
  #fetch: dest/tmp/rabbitmq-erlang.cookie src=/var/lib/rabbitmq/.erlang.cookie
  delegate_to: dbmaster
  
- name: Copy masters erlang cookie to slave(s)
  copy: 
    dest: /var/lib/rabbitmq/.erlang.cookie 
    content: "{{rabbitmq_erlang_cookie.content | b64decode}}"
    owner: rabbitmq
    group: rabbitmq
    mode: 0400
    backup: yes
  when: dbrole == 'slave'

- name: rabbitmq_clustering | restarting rabbitmq-server on master
  service: name=rabbitmq-server state=restarted
  when: dbrole == 'master'

- name: rabbitmq_clustering | starting rabbitmq app on master
  command: rabbitmqctl start_app
  register: cluster_master
  when: dbrole == 'master'

- name: rabbitmq_clustering | sending sigterm to any running rabbitmq processes
  shell: pkill -u rabbitmq || true
  when: dbrole != 'master'
  
- name: rabbitmq_clustering | restarting rabbitmq-server
  service: name=rabbitmq-server state=restarted
  when: dbrole != 'master'
  
- name: rabbitmq_clustering | stopping rabbitmq app
  command: rabbitmqctl stop_app
  ignore_errors: yes
  when: dbrole != 'master'
  
- name: rabbitmq_clustering | resetting rabbitmq app
  command: rabbitmqctl reset
  when: dbrole != 'master'
  
- name: rabbitmq_clustering | joining rabbitmq cluster
  command: rabbitmqctl join_cluster 'rabbit@{{ hostvars[groups['backendservers'][0]]['ansible_hostname'] }}'
  register: cluster_joined
  when: dbrole != 'master'
  
- name: rabbitmq_clustering | starting rabbitmq app
  command: rabbitmqctl start_app
  when: dbrole != 'master'

- name: rabbitmq_clustering | setting ha policy
  command: rabbitmqctl set_policy ha-all '^(?!amq\.).*' '{"ha-mode": "all"}'
  when: dbrole == 'master'
  
- name: rabbitmq_clustering | marking as clustered
  file: path=/etc/rabbitmq/clustered state=touch
  when: cluster_master.changed or cluster_joined.changed

